name: Deploy Service

permissions:
  contents: read
  packages: write

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      path:
        required: true
        type: string
      source:
        type: string
    secrets:
      host:
        required: true
      user:
        required: true
      key:
        required: true
      port:
        required: true
      env:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Sparse checkout으로 하위 디렉토리만 체크아웃
      - name: Checkout repository with sparse checkout
        uses: actions/checkout@v3
        with:
          path: ${{ inputs.service }}
          fetch-depth: 0
          sparse-checkout: |
            ${{ inputs.path }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Transfer YAML files using SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.host }}
          username: ${{ secrets.user }}
          key: ${{ secrets.key }}
          port: ${{ secrets.port }}
          source: ${{ inputs.source }}
          target: "/home/watchducks/app"
          strip_components: 3

      # GHCR 로그인
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 도커 이미지 빌드 & 푸시
      - name: Build and push Docker image for ${{ inputs.service }}
        uses: docker/build-push-action@v2
        with:
          context: ./${{ inputs.service }}/${{ inputs.path }}
          file: ./${{ inputs.service }}/${{ inputs.path }}/Dockerfile
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ inputs.service }}/${{ inputs.path }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ inputs.service }}/${{ inputs.path }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

      # 각 서비스 서버에 배포
      - name: Deploy ${{ inputs.service }} to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.host }}
          username: ${{ secrets.user }}
          key: ${{ secrets.key }}
          port: ${{ secrets.port }}
          script: |
            cd /home/watchducks/app
            touch .env
            echo "${{ secrets.env }}" > .env
            
            # 최신 이미지 가져오기
            docker-compose pull
            # Nginx 시작 (재시작 포함)
            docker-compose up -d --no-deps nginx
            
            # Nginx가 실행 중인지 확인
            for i in {1..10}; do
              if docker-compose ps | grep nginx | grep "Up"; then
                echo "Nginx is running"
                break
              fi
              echo "Waiting for Nginx to be ready..."
              sleep 2
            done

            # Blue 인스턴스를 새 버전으로 준비
            docker-compose up -d --no-deps server-blue
            
            # Blue 인스턴스 헬스 체크
            echo "Checking Blue container health status..."
            health_status=$(docker inspect --format='{{json .State.Health.Status}}' server-blue | tr -d '"')
            if [ "$health_status" == "healthy" ]; then
              echo "Blue container is healthy"
            else
              echo "Blue container did not become healthy"
              exit 1
            fi
            
            # Nginx 리로드로 트래픽 전환
            docker-compose exec nginx nginx -s reload
            
            # 기존 Green 인스턴스 종료
            docker-compose up -d --no-deps server-green
            echo "Deployment completed successfully"