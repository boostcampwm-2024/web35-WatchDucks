name: Deploy Service

permissions:
  contents: read


on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      path:
        required: true
        type: string
      source:
        type: string
      use_host_nginx:
        required: false
        type: boolean
        default: false
    secrets:
      host:
        required: true
      user:
        required: true
      key:
        required: true
      port:
        required: true
      env:
        required: true
      tok:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      # Sparse checkout으로 하위 디렉토리만 체크아웃
      - name: Checkout repository with sparse checkout
        uses: actions/checkout@v3
        with:
          path: ${{ inputs.service }}
          fetch-depth: 0
          sparse-checkout: |
            ${{ inputs.path }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Transfer YAML files using SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.host }}
          username: ${{ secrets.user }}
          key: ${{ secrets.key }}
          port: ${{ secrets.port }}
          source: ${{ inputs.source }}
          target: "/home/watchducks/app"
          strip_components: 3

      # GHCR 로그인
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.tok }}

      # 도커 이미지 빌드 & 푸시
      - name: Build and push Docker image for ${{ inputs.service }}
        uses: docker/build-push-action@v2
        with:
          context: ./${{ inputs.service }}/${{ inputs.path }}
          file: ./${{ inputs.service }}/${{ inputs.path }}/Dockerfile
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ inputs.service }}/${{ inputs.path }}:${{ github.sha }}
            ghcr.io/${{ github.repository_owner }}/${{ inputs.service }}/${{ inputs.path }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true

      # 각 서비스 서버에 배포
      - name: Deploy ${{ inputs.service }} to server
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.host }}
          username: ${{ secrets.user }}
          key: ${{ secrets.key }}
          port: ${{ secrets.port }}
          script: |
            cd /home/watchducks/app
            touch .env
            echo "${{ secrets.env }}" > .env
            
            echo "${{ secrets.tok }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 최신 이미지 가져오기
            docker-compose pull
            
            # 호스트에 설치된 Nginx를 사용할지 확인
            if [ "${{ inputs.use_host_nginx }}" == "true" ]; then
              # Dockerized Nginx 없이 Blue 컨테이너만 시작
              docker-compose up -d --no-deps server-blue
            
              # Blue 인스턴스 헬스 체크 - 최대 5번 시도
              echo "Blue 컨테이너 헬스 상태 확인 중..."
              for i in {1..5}; do
                health_status=$(docker inspect --format='{{json .State.Health.Status}}' app-server-blue-1 | tr -d '"')
                if [ "$health_status" == "healthy" ]; then
                  echo "Blue 컨테이너가 정상 상태입니다."
                  break
                else
                  echo "Blue 컨테이너가 정상 상태로 전환되지 않았습니다. 시도 $i/5..."
                  sleep 10
                fi
              done
            
              # 최종 헬스 상태 확인
              if [ "$health_status" != "healthy" ]; then
                echo "Blue 컨테이너가 정상 상태로 전환되지 않았습니다."
                exit 1
              fi
            
              # Nginx 재로드
              sudo nginx -s reload
              echo "호스트 Nginx 리로드 완료로 트래픽 전환 완료"
            
            else
              # 콘솔 서버의 Dockerized Nginx 설정
              docker-compose up -d --no-deps nginx
            
              # Dockerized Nginx와 함께 Blue 컨테이너 시작
              docker-compose up -d --no-deps server-blue
            
              # Blue 인스턴스 헬스 체크 - 최대 5번 시도
              echo "Blue 컨테이너 헬스 상태 확인 중..."
              for i in {1..5}; do
                health_status=$(docker inspect --format='{{json .State.Health.Status}}' app-server-blue-1 | tr -d '"')
                if [ "$health_status" == "healthy" ]; then
                  echo "Blue 컨테이너가 정상 상태입니다."
                  break
                else
                  echo "Blue 컨테이너가 정상 상태로 전환되지 않았습니다. 시도 $i/5..."
                  sleep 10
                fi
              done
            
              # 최종 헬스 상태 확인
              if [ "$health_status" != "healthy" ]; then
                echo "Blue 컨테이너가 정상 상태로 전환되지 않았습니다."
                exit 1
              fi
            
              # Dockerized Nginx 리로드로 트래픽 전환
              docker-compose exec nginx nginx -s reload
              echo "Dockerized Nginx 리로드 완료로 트래픽 전환 완료"
            fi
            
            # Green 컨테이너 시작 (두 설정 모두에서 수행)
            docker-compose up -d --no-deps server-green
            echo "배포가 성공적으로 완료되었습니다."